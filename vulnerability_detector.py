import torch
import pandas as pd
from transformers import (
    AutoTokenizer,
    AutoModelForSequenceClassification,
)

# Environment / Global settings
MODEL_ID = "eunJ/codebert_vulnerabilty_detector"   # HF repository ID
CSV_PATH = "dataset/test.csv"                              # Path to evaluation CSV
TEXT_COL = "processed_func"                        # Column name containing code text
THRESHOLD = 0.5                                    # Sigmoid probability threshold

# Automatically select CUDA or CPU
DEVICE = "cuda" if torch.cuda.is_available() else "cpu"

# Load model and tokenizer
def load_model_and_tokenizer(model_id: str, device: str):
    tokenizer = AutoTokenizer.from_pretrained(model_id)
    model = AutoModelForSequenceClassification.from_pretrained(model_id)
    model.to(device)
    model.eval()
    return model, tokenizer

# Vulnerability detection
@torch.no_grad()
def detect_code(model, tokenizer, code: str, device: str = DEVICE, threshold: float = THRESHOLD):
    # Tokenizer
    inputs = tokenizer(
        code,
        return_tensors="pt",
        truncation=True,
        padding=True,
        max_length=512,
    ).to(device)

    # Model inference
    model.to(device)
    outputs = model(**inputs)                 
    logits = outputs.logits
    prob = torch.sigmoid(logits).squeeze().item()
    is_vul = prob > threshold
    return prob, is_vul

def print_result(title: str, code: str, prob: float, is_vul: bool, threshold: float = THRESHOLD):
    print("=" * 80)
    print(title)
    print("-" * 80)
    print("Input code:\n")
    print(code)
    print("\nPrediction:")
    print(f"  - Vulnerability probability: {prob:.4f}")
    print(f"  - Threshold: {threshold:.2f}")
    print(f"  - Result: {'⚠️ Vulnerable' if is_vul else '✅ Benign'}")
    print("=" * 80 + "\n")

def main():
    model, tokenizer = load_model_and_tokenizer(MODEL_ID, DEVICE)

    df = pd.read_csv(CSV_PATH)
    if TEXT_COL not in df.columns or "generated_LLM" not in df.columns:
        raise ValueError(
            f"The CSV does not contain the '{TEXT_COL}' or 'generated_LLM' column. "
            f"Current columns: {list(df.columns)}"
        )

    gpt4o_row = None
    skku_row = None

    gpt4o_row = df[df["generated_LLM"] == 'gpt4o']
    if not gpt4o_row.empty:
        gpt4o_row = gpt4o_row[TEXT_COL].iloc[0]

    skku_row = df[df["generated_LLM"] == 'skku']
    if not skku_row.empty:
        skku_row = skku_row[TEXT_COL].iloc[0]

    if gpt4o_row is None and skku_row is None:
        raise ValueError(
            f"No data found in CSV for label {VUL_LABEL} or {BENIGN_LABEL}."
        )

    if gpt4o_row is not None:
        prob, is_vul = detect_code(model, tokenizer, gpt4o_row, DEVICE, THRESHOLD)
        print_result("Sample (generated by gpt4o)", gpt4o_row, prob, is_vul, THRESHOLD)

    if skku_row is not None:
        prob, is_vul = detect_code(model, tokenizer, skku_row, DEVICE, THRESHOLD)
        print_result("Sample (generated by SKKU)", skku_row, prob, is_vul, THRESHOLD)


if __name__ == "__main__":
    main()
